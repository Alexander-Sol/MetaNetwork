## Functions for the WGCNA workflow ##
#' @param fullDataSet
#' @param modulesList
#' @param filePath
createResultsWGCNAExcelWorkbook <- function(fullDataSet, modulesList,
                                            filePath = "Results/ResultsWGCNA.xlsx",
                                            ...){
  wb = createWorkbook()

  addWorksheet(wb, paste("WGCNA_workbook"))
  writeData(wb, sheet = 1, fullDataSet)

  # write modules only tabs
  for(ii in 1:length(modulesList)) {
    addWorksheet(wb, names(modulesList)[ii])
    writeData(wb, names(modulesList)[ii], modulesList[[ii]])
  }

  saveWorkbook(wb, file = filePath, overwrite=TRUE)
}

#' @param selectedDatabase User uploaded database of UniProt Accessions and Genes
#' @param allData The result of the WGCNA
#' @param dataList
#' @return This function combines the list of
mergeAndWriteWGCNAWorkbook <- function(selectedDatabase,
                                       allData,
                                       dataList, ...){
  allData <- as_tibble(allData)
  dataList <- lapply(dataList, as_tibble)
  message("Pulling gene symbols from Uniprot Database...")
  userInputDatabaseSelectedColumns <- tibble(selectedDatabase$Entry,
                                             selectedDatabase$`Gene names`,
                                             selectedDatabase$`Protein names`)
  colnames(userInputDatabaseSelectedColumns) <- c(names(allData)[1],
                                                  "gene name",
                                                  "protein name")
  dat.resMerged <- left_join(allData,
                             userInputDatabaseSelectedColumns,
                             by = names(allData)[1])
  message("Error does not occur in Line 16")
  list.cluster.datMerged <- list()
  for(i in seq_along(dataList)){
    list.cluster.datMerged[[i]] <- left_join(dataList[[i]],
                                             userInputDatabaseSelectedColumns,
                                             by = names(allData[1]))
  }
  message("Saving workbook...")
  names(list.cluster.datMerged) <- names(dataList)
  createResultsWGCNAExcelWorkbook(dat.resMerged, list.cluster.datMerged, ...)
  message("WGCNA workbook saved")
}

#' @param moduleEigenproteins
#' @param filename
#' @param widthInches
#' @return
plotAdjacencyHeatmap <- function(moduleEigenproteins,
                                 fileName = "Results/Eigenprotein_adjacency heatmap.pdf",
                                 widthInches = 10){
  MET <- orderMEs(MEs = moduleEigenproteins)


  pdf(file = fileName, width = widthInches)
  par(cex = 1.0)
  plotEigengeneNetworks(MET, "Eigenprotein Dendrogram",
                        marDendro = c(0,4,2,0),
                        plotHeatmaps = FALSE)

  plotEigengeneNetworks(MET,
                        "Eigenprotein adjacency heatmap",
                        marDendro = c(3,4,2,2),
                        xLabelsAngle = 90)
  dev.off()
  message("Adjacency heatmap created")
}

#' @param x
#' @return
plotDendrograms <- function(x){
  extracted_dendro_data <- dendro_data(x)

  ggplot()+
    geom_segment(data = extracted_dendro_data$segments,
                 aes(x = x, y = y, xend = xend, yend = yend))+
    geom_text(data = extracted_dendro_data$labels,
              aes(x = x, y = y, label = label),
              size = 3, vjust = 0, angle = 90)

}

#' @param moduleEigenproteins
#' @param filename
#' @param widthInches
#' @return
plotEigenproteinsNetwork <- function(moduleEigenproteins,
                                     fileName = "Results/DendrogramEigenproteins.pdf",
                                     widthInches = 10){
  pdf(file = fileName, width = widthInches)
  plotEigengeneNetworks(moduleEigenproteins,
                        "EigenproteinNetwork",
                        marHeatmap = c(3,4,2,2),
                        marDendro = c(3,4,2,5),
                        plotDendrograms = TRUE,
                        xLabelsAngle = 90,
                        heatmapColors=blueWhiteRed(50))
  dev.off()
  message("Eigenproteins dendrogram exported")
}

#' @param moduleEigenproteins
#' @param fileName
#' @param widthInches
#' @return
plotmoduleEigenproteinsHeatmap <- function(moduleEigenproteins,
                                           fileName = "Results/ModuleEigenproteinsHeatmap.pdf",
                                           widthInches = 15){
  modulesHeatmap <- heatmap3(moduleEigenproteins,
                             distfun = function(x) dist(x, method="euclidean"),
                             main = "Module Eigenproteins",
                             cexRow = 0.6, cexCol = 0.6)
  pdf(file = fileName, width = widthInches)
  heatmap3(moduleEigenproteins, distfun = function(x) dist(x, method="euclidean"),
           main = "Module Eigenproteins",
           cexRow = 0.6, cexCol = 0.6)
  dev.off()
  message("Heatmap of eigenproteins successfully created")
}

#' @param proteinDendrogram
#' @param dynamicColors
#' @param mergedColors
#' @return
plotProteinDendrogram <- function(proteinDendrogram,
                                  dynamicColors,
                                  mergedColors){

  pdf("Results/DendroColorMergedClust.pdf")
  plotDendroAndColors(proteinDendrogram, mergedColors,
                      "Merged dynamic", rowText = mergedColors,
                      dendroLabels = FALSE, hang = 0.03,
                      addGuide = TRUE, guideHang = 0.05,
                      rowTextAlignment = "left",
                      addTextGuide = TRUE)
  dev.off()
  message("Protein dendrogram generated")
}

#' @param dendro
#' @param fontSize
#' @param fileName
#' @return
plotSampleClusteringDendro <- function(dendro, fontSize = 15,
                                       fileName = "SampleClustering.pdf"){
  sampleClusteringQC  <- ggdendrogram(dendro, rotate = TRUE)+
    ggtitle("Sample Clustering to Detect Outliers")+
    xlab("Sample")+
    ylab("Height")+
    coord_flip()
  theme_bw()

  theme_bw(base_size = fontSize)
  ggsave(filename = fileName, path = "Results", plot = last_plot())
  message("Sample dendrogram created")
}

#' @param fileName
#' @param powersOutput
#' @param powers
#' @param cex1
#' @param ScaleFreeThreshold
#' @param widthInches
#' @return
plotScaleFreeTopology <- function(fileName = "Results/ScaleFreeTopology.pdf",
                                  powersOutput,
                                  powers,
                                  cex1 = 0.9,
                                  scaleFreeThreshold,
                                  widthInches = 10){
  pdf(fileName, width = widthInches)
  par(mfrow = c(1,2))
  # Scale-free topology fit index as a function of the soft-thresholding power
  plot(powersOutput$fitIndices[,1], -sign(powersOutput$fitIndices[,3])*powersOutput$fitIndices[,2],
       xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
       main = paste("Scale independence"))
  text(powersOutput$fitIndices[,1], -sign(powersOutput$fitIndices[,3])*powersOutput$fitIndices[,2],
       labels=powers,cex=cex1,col="red")
  # this adds the red line corresponding to R^2. Default = 0.85
  abline(h=scaleFreeThreshold,col="red")
  # Mean connectivity as a function of the soft-thresholding power
  plot(powersOutput$fitIndices[,1], powersOutput$fitIndices[,5],
       xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
       main = paste("Mean connectivity"))
  text(powersOutput$fitIndices[,1], powersOutput$fitIndices[,5], labels=powers, cex=cex1,col="red")
  dev.off()
  message("Scale free topology plot successfully cretaed")
}

#' @param TOMData
#' @param proteinDendro
#' @param moduleColors
#' @param fileName
#' @return
plotTOM <- function(TOMData,
                    proteinDendro,
                    moduleColors,
                    fileName = "Results/NetworkHeatmap.png", ...){
  message("Begin generating TOM plot.")
  message("Please be patient. This may take a while")

  dev.new()
  png(filename = fileName)
  TOMplot(TOMData, proteinDendro, moduleColors,
          main = "Network heatmap plot, all proteins",
          col = hcl.colors(n = 55, palette = "viridis", alpha = 1, rev = FALSE), ...) #rev(heat.colors()))
  dev.off()
  message("TOM plot successfully generated")
}

#' @param TOMData
#' @param proteinDendro
#' @param moduleColors
#' @param fileName
#' @param height
#' @param width
plotTOMpdf <- function(TOMData,
                       proteinDendro,
                       moduleColors,
                       fileName = "Results/NetworkHeatmap.pdf",
                       height=12,
                       width=12){
  message("Use only for small TOMs!")
  message("Begin generating TOM plot.")
  message("Please be patient. This may take a while")

  dev.new()
  pdf(file = fileName, height, width)
  TOMplot(TOMData, proteinDendro, moduleColors,
          main = "Network heatmap plot, all proteins",
          col = hcl.colors(n = 55,
                           palette = "viridis",
                           alpha = 1, rev = FALSE),
          ... = list(labRow = TRUE,
                     colRow = TRUE)) #rev(heat.colors()))
  dev.off()
  message("TOM plot successfully generated")
}
## Tidy the data
#' @param dataInput
#' @param moduleColors
#' @param groupsFile
#' @return
tidyModuleDataForOutput <- function(dataInput, moduleColors, groupsFile){
  col.length <- length(colnames(dataInput)) - 1

  dfAddedColumn <- add_column(dataInput, "Experiment" = rownames(dataInput))
  dataFile_tidy <- gather(dfAddedColumn, key = "Gene", value = "Expression", 1:col.length)

  genes_colors.df <- data.frame(colnames(dataInput), moduleColors)
  colnames(genes_colors.df) <- c("Gene", "moduleColor")
  dataColTidy <- left_join(dataFile_tidy, genes_colors.df, "Gene")
  dataColTidy$moduleColor <- as.factor(dataColTidy$moduleColor)
  colnames(groupsFile) <- c("Experiment", "SampleID")
  groupsFile$Experiment <- str_replace_all(groupsFile$Experiment,
                                           pattern = " ",
                                           replacement = ".")

  allDataFinal <- left_join(dataColTidy, groupsFile, "Experiment")
  message("Module data is now tidy")
  return(allDataFinal)
}
## Variance explained by eigenproteins
#' @param datExpr
#' @param colors
#' @param MEs
#' @return
writeVarianceExplained <- function(datExpr,
                                   colors,
                                   MEs){
  varianceExplained <- propVarExplained(datExpr,
                                        colors,
                                        MEs,
                                        corFnc = "cor",
                                        corOptions = "use = 'p'")
  write.csv(x = varianceExplained, file = "Results/varianceExplained.csv")
  message("Variance explained file successfully written")
}

